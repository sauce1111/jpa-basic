## 객체와 테이블 매핑

### @Entity

- JPA 가 관리 - 엔티티
- 기본 생성자 필수
- final 클래스, enum, interface, inner 클래스 사용 X

### DB 스키마 자동생성

- DDL을 애플리케이션 실행 시점에 자동 생성
- 테이블 중심 → 객체 중심
- DB 방언에 맞는 적절한 DDL 생성
- 개발단계에서만 사용 권장, 실무 사용 X

**자동생성 옵션**

![스크린샷 2025-03-21 오후 1.13.24.png](attachment:34af84fb-e278-4ad6-88d4-d0fe2dbba9a4:스크린샷_2025-03-21_오후_1.13.24.png)

**운영 장비에서는 절대 create, create-drop, update 사용하면 안됨**

## 필드와 컬럼 매핑

- **매핑 어노테이션**

![스크린샷 2025-03-21 오후 1.27.37.png](attachment:2e41402d-533d-4ec0-af1b-cbde3132c658:스크린샷_2025-03-21_오후_1.27.37.png)

- **@Coumn 어노테이션 옵션**

![스크린샷 2025-03-21 오후 1.29.20.png](attachment:120e49ba-de89-4180-9685-351bf1bce401:스크린샷_2025-03-21_오후_1.29.20.png)

- **@Enumerated 사용시 주의사항** - **ORDINAL 사용 X**

![스크린샷 2025-03-21 오후 1.34.11.png](attachment:0bc165b2-9d01-4a9a-b485-0426c1e8ec1b:스크린샷_2025-03-21_오후_1.34.11.png)

## 기본 키 매핑

- @Id
- @GeneratedValue

### @GeneratedValue 옵션

1. IDENTITY
**-** 기본 키 생성을 DB에 위임 - 주로 MySQL, PostgreSQL, SQL Server, DB2에서 사용
- JPA는 보통 트랜잭션 커밋 시점에 INSERT SQL 실행
- AUTO_ INCREMENT는 DB에 INSERT SQL을 실행 한 이후에 ID 값을 알 수 있음
- IDENTITY 전략은 **em.persist() 시점에 즉시 INSERT SQL 실행하고 DB에서 식별자를 조회**
2. SEQUENCE
- DB 시퀀스는 유일한 값을 순서대로 생성하는 특별한 DB 오브젝트(예: 오라클 시퀀스)
- @SequenceGenerator 로 옵션 설정 가능
- **next value 를 가져오기 위해 쿼리가 실행되는 성능저하를 막기위해 allocationSize 옵션을 지원**
3. TABLE - 키 생성 전용 테이블을 하나 만들어서 데이터베이스 시퀀스를 흉내내는 전략
4. AUTO - 방언에 따라 자동 지정, 기본값

### 권장하는 식별자 전략

- **기본 키 제약 조건**: null 아님, 유일, **변하면 안된다**
- 미래까지 이 조건을 만족하는 자연 키는 찾기 어렵다. 대리 키(대체 키)를 사용하자
예를 들어 주민등록번호도 기본 키로 적절하기 않음
- **권장: Long형 + 대체 키 + 키 생성전략 사용**